{"version":3,"sources":["logo.svg","api/quizQuestions.js","App/QuestionCount/QuestionCount.js","App/Question/Question.js","App/AnswerOption/AnswerOption.js","App/Quiz/Quiz.js","App/Result/Result.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","quizQuestions","question","answers","type","content","QuestionCount","props","className","counter","total","Question","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","questionTotal","answerOptions","map","Result","quizResult","App","state","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","src","logo","alt","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed5938e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const quizQuestions = [\r\n    {\r\n        question: \"What franchise would you rather play a game from?\",\r\n        answers: [\r\n            {\r\n                type: \"PC\",\r\n                content: \"StarCraft\"\r\n            },\r\n            {\r\n                type: \"X-Box\",\r\n                content: \"Halo\"\r\n            },\r\n            {\r\n                type: \"PlayStation\",\r\n                content: \"Uncharted\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which platform would you prefer to play with friends?\",\r\n        answers: [\r\n            {\r\n                type: \"PC\",\r\n                content: \"PC\"\r\n            },\r\n            {\r\n                type: \"X-Box\",\r\n                content: \"X-Box One\"\r\n            },\r\n            {\r\n                type: \"PlayStation\",\r\n                content: \"Playstation 4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which of these racing franchises would you prefer to play a game from?\",\r\n        answers: [\r\n            {\r\n                type: \"PC\",\r\n                content: \"Need For Speed\"\r\n            },\r\n            {\r\n                type: \"X-Box\",\r\n                content: \"Forza\"\r\n            },\r\n            {\r\n                type: \"PlayStation\",\r\n                content: \"Gran Turismo\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which of these games do you think is best?\",\r\n        answers: [\r\n            {\r\n                type: \"PC\",\r\n                content: \"Doom\"\r\n            },\r\n            {\r\n                type: \"X-Box\",\r\n                content: \"Gears of War\"\r\n            },\r\n            {\r\n                type: \"PlayStation\",\r\n                content: \"Bloodborne\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"What would you prefer to buy?\",\r\n        answers: [\r\n            {\r\n                type: \"PC\",\r\n                content: \"GeForce RTX 2080 TI\"\r\n            },\r\n            {\r\n                type: \"X-Box\",\r\n                content: \"Next Generetion X-Box\"\r\n            },\r\n            {\r\n                type: \"PlayStation\",\r\n                content: \"Next Generetion PlayStation\"\r\n            }\r\n        ]\r\n    }\r\n  ];\r\n  \r\n  export default quizQuestions;","import React from 'react';\r\n\r\nfunction QuestionCount(props) {\r\n  return (\r\n    <div className=\"questionCount\">\r\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCount;\r\n","import React from 'react';\r\n\r\nfunction Question(props) {\r\n  return (\r\n    <h2 className=\"question\">{props.content}</h2>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerType}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\r\n\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nimport QuestionCount from '../QuestionCount/QuestionCount';\r\nimport Question from '../Question/Question';\r\nimport AnswerOption from '../AnswerOption/AnswerOption';\r\n\r\nfunction Quiz(props) {\r\n  function renderAnswerOptions(key) {\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div key={props.questionId}>\r\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\r\n        <Question content={props.question} />\r\n        <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <CSSTransitionGroup\r\n    className=\"container result\"\r\n    component=\"div\"\r\n    transitionName=\"fade\"\r\n    transitionEnterTimeout={800}\r\n    transitionLeaveTimeout={500}\r\n    transitionAppear\r\n    transitionAppearTimeout={500}\r\n  >\r\n    <div>\r\n      You prefer <strong>{props.quizResult}</strong>!\r\n    </div>\r\n  </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\n\nimport quizQuestions from '../api/quizQuestions';\nimport Quiz from './Quiz/Quiz';\nimport Result from './Result/Result';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));  \n  \n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  };\n\n  setUserAnswer(answer) {\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n      } else {\n        setTimeout(() => this.setResults(this.getResults()), 300);\n      }\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n  \n    return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults (result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'to be a REAL GAMER' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n  \n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Quiz</h2>\n        </header>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}